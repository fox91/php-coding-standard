<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Fox91 Coding Standard" xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <!-- Generic sniffs -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0"/>
        </properties>
    </rule>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="create_function" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="print" value="echo"/>
                <element key="settype" value="null"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
                <element key="user_error" value="trigger_error"/>
            </property>
        </properties>
    </rule>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true" />
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
        </properties>
    </rule>

    <!-- PHPCompatibility sniffs -->
    <rule ref="PHPCompatibility"/>

    <!-- PSR1 sniffs -->
    <rule ref="PSR1.Methods.CamelCapsMethodName"/>
    <rule ref="PSR1.Classes.ClassDeclaration">
        <type>warning</type>
    </rule>

    <!-- PSR2 sniffs -->
    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration">
        <type>error</type>
    </rule>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent"/>
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent"/>
    </rule>
    <rule ref="PSR2.Files.ClosingTag"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.MultipleArguments"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterOpenBracket"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceBeforeCloseBracket"/>
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>

    <!-- PSR12 sniffs -->
    <rule ref="PSR12.ControlStructures.ControlStructureSpacing">
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>
    </rule>

    <!-- Squiz sniffs -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/>
    </rule>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
    <rule ref="Squiz.NamingConventions">
        <!-- Private methods MUST not be prefixed with an underscore -->
        <exclude name="Squiz.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
        <!-- Already covered by PSR1.Methods.CamelCapsMethodName -->
        <exclude name="Squiz.NamingConventions.ValidFunctionName.ScopeNotCamelCaps"/>
        <!-- Private properties MUST not be prefixed with an underscore -->
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace">
        <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing.FirstIncorrect"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- <rule ref="Squiz.WhiteSpace.OperatorSpacing"/> -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

    <!-- SlevomatCodingStandard sniffs -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>
                <element value="enum cases"/>
                <element value="public constants"/>
                <element value="constants"/>
                <element value="properties, static properties"/>
                <element value="constructor"/>
                <element value="all public methods"/>
                <element value="methods"/>
                <element value="magic methods"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLineDocComment"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <type>warning</type>
        <properties>
            <property name="maxLinesLength" value="40"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.RequireSingleLineCall"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFullyQualifiedName"/>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBetweenUseTypes" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast.InvalidCastUsed"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="linesCountBeforeDeclare" value="0"/>
            <property name="linesCountAfterDeclare" value="1"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingAnyTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification">
        <type>error</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingAnyTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification">
        <type>error</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces"/>

    <!-- VariableAnalysis sniffs -->
    <rule ref="VariableAnalysis">
        <exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable"/>
    </rule>
    <rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis.UndefinedVariable">
        <type>error</type>
    </rule>
</ruleset>
